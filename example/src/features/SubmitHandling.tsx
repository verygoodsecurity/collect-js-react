import {
  VGSCollectForm,
  VGSCollectFormState,
  VGSCollectHttpStatusCode,
  VGSCollectVaultEnvironment,
  useVGSCollectResponse,
  useVGSCollectState,
  useVGSCollectFormInstance,
  IVGSCollectForm
} from 'collect-js-react';
import React, { useEffect, useState } from 'react';

import { loadVGSCollect } from '@vgs/collect-js';

const { CardNumberField } = VGSCollectForm;

const { REACT_APP_VAULT_ID, REACT_APP_ENVIRONMENT, REACT_APP_COLLECT_VERSION } = process.env;

const SubmitHandling = (e: any) => {
  const [isVGSCollectScriptLoaded, setCollectScriptLoaded] = useState(false);
  const [formInstance, setFormInstance] = useState<IVGSCollectForm | null>(null);
  const [isFormSubmitting, setFormSubmitting] = useState(false);
  const VGSCollectFieldStyles = {
    '&::placeholder': {
      color: '#686868'
    },
    padding: '.5rem 1rem',
    boxSizing: 'border-box'
  };

  const [state] = useVGSCollectState();
  const [response] = useVGSCollectResponse();
  const [form] = useVGSCollectFormInstance();

  useEffect(() => {
    /**
     * Track form state
     */
  }, [state]);

  useEffect(() => {
    /**
     * Track response from the VGS Collect form
     */
  }, [response]);

  useEffect(() => {
    setFormInstance(form);
  }, [form]);

  useEffect(() => {
    /**
     * Loading VGS Collect script from and attaching it to the <head>
     */
    loadVGSCollect({
      vaultId: REACT_APP_VAULT_ID as string,
      environment: REACT_APP_ENVIRONMENT as VGSCollectVaultEnvironment,
      version: REACT_APP_COLLECT_VERSION as string
    }).then(() => {
      setCollectScriptLoaded(true);
    });
  }, []);

  const onErrorCallback = (errors: VGSCollectFormState) => {
    /**
     * Receive information about Erorrs (client-side validation, or rejection in async headers function)
     */
  };

  const onUpdateCallback = (state: VGSCollectFormState) => {
    /**
     * Listen to the VGS Collect form state
     */
  };

  const customHandling = (event: any) => {
    event.preventDefault();
    if (!isFormSubmitting && formInstance) {
      setFormSubmitting(true);
      let path = '/post'
      if (state?.pan?.cardType ==='testCard') {
        path = '/custom-card'
      }
      formInstance.submit(
        path,
        {},
        (status, data) => {
          console.log('Response:', status, data);
          setFormSubmitting(false);
        },
        (errors) => {
          console.log(errors);
          setFormSubmitting(false);
        }
      );
    }
  };

  return (
    <>
      {isVGSCollectScriptLoaded && (
        <div className='left'>
          <h2>Custom Submit Handling</h2>
          {/**
           * VGS Collect form wrapper element. Abstraction over the VGSCollect.create()
           * https://www.verygoodsecurity.com/docs/api/collect/#api-vgscollectcreate
           */}
          <VGSCollectForm
            vaultId={REACT_APP_VAULT_ID as string}
            environment={REACT_APP_ENVIRONMENT as VGSCollectVaultEnvironment}
            onCustomSubmit={customHandling}
            onUpdateCallback={onUpdateCallback}
            onErrorCallback={onErrorCallback}
          >
            {/**
             * VGS Collect text field component:
             * https://www.verygoodsecurity.com/docs/api/collect/#api-formfield
             */}
            <CardNumberField
              name='pan'
              // validations={['required']}
              css={VGSCollectFieldStyles}
              showCardIcon={true}
              addCardBrands={[
              {
                type: 'testCard',
                pattern: /^123/,
                format: /(\d{1,4})/g,
                length: [16],
                cvvLength: [3],
                luhn: true,
              }]}
              // icons={{testCard: 'data:image/png;base64, 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'}}
              icons={{testCard: 'data:image/png;base64, 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'}}
            />
            <button type='submit'>Submit</button>
          </VGSCollectForm>
          <pre>{JSON.stringify(state, null, '  ')}</pre>
        </div>
      )}
    </>
  );
};

export default SubmitHandling;
